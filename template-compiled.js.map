{"version":3,"sources":["template.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,CAAC,YAAU;;;;;;;;;;;;;AAazB,KACC,SAAS,GAAG,EAAE;KACd,KAAK,GAAO,IAAI,GAAG,CAAC,CAAC;;;;;;;;;;;;AAYtB,UAAS,QAAQ,CAAE,UAAU,EAAE;;AAE9B,MAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC3B,MAAI,CAAC,IAAI,GAAO,EAAE,CAAC;EACnB;;AAED,OAAM,CAAE,QAAQ,CAAC,SAAS,EAAE;;;;;;;;;;AAU3B,MAAI,EAAI,cAAU,IAAI,EAAE;AACvB,UAAO,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAE,CAAC;GAC7B;EACD,CAAE,CAAC;;;AAGJ,OAAM,CAAE,QAAQ,EAAE;;;;;;;;;;;;;AAajB,KAAG,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;;AAE3B,OAAI,WAAW,GAAG,SAAS,CAAE,IAAI,CAAE,CAAC;;;AAGpC,OAAI,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,EAAE,IAAI,AAAC,WAAW,CAAC,KAAK,GAAG,KAAK,GAAI,IAAI,CAAC,GAAG,EAAE,EAAE;AACtF,WAAO,CAAC,GAAG,CAAE,IAAI,GAAG,mBAAmB,CAAE,CAAC;AAC1C,eAAW,GAAG,SAAS,CAAE,IAAI,CAAE,GAAG;AACjC,OAAE,EAAK,eAAe,CAAE,IAAI,CAAE;AAC9B,UAAK,EAAE,IAAI,CAAC,GAAG,EAAE;KACjB,CAAC;IACF;;AAED,UAAO,IAAI,QAAQ,CAAE,WAAW,CAAC,EAAE,CAAE,CAAC;GACtC,CAAC;EACF,CAAE,CAAC;;AAEJ,QAAO,QAAQ,CAAA;CAEf,CAAA,EAAG,CAAC","file":"template-compiled.js","sourcesContent":["var Template = (function(){\r\n\r\n\t/**\r\n\t * @package Template\r\n\t *\r\n\t * the template class is used to store all the information to\r\n\t * compile a template. it can be returned as a template string\r\n\t * or a json object\r\n\t *\r\n\t * @author  Andrew Fountain\r\n\t * @email   andrew@envision.digital\r\n\t * @date    2015-08-01\r\n\t */\r\n\tvar\r\n\t\ttemplates = {},\r\n\t\tcache     = 1000 * 1;\r\n\r\n\t/**\r\n\t * Template\r\n\t *\r\n\t * this class is used to hold all the variables used to compile a\r\n\t * Template.\r\n\t *\r\n\t * @param   {Function}  templateFn  function to compile a template\r\n\t *\r\n\t * @constructor\r\n\t */\r\n\tfunction Template( templateFn ){\r\n\r\n\t\tthis.template = templateFn;\r\n\t\tthis.vars     = {};\r\n\t}\r\n\r\n\textend( Template.prototype, {\r\n\r\n\t\t/**\r\n\t\t * Template.send\r\n\t\t *\r\n\t\t * this function will compile the template variables with the\r\n\t\t * template function to give a finished template\r\n\t\t *\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tsend  : function( vars ){\r\n\t\t\treturn this.template( vars );\r\n\t\t}\r\n\t} );\r\n\r\n// add static methods to the template object\r\n\textend( Template, {\r\n\t\t/**\r\n\t\t * @static  Template.get\r\n\t\t *\r\n\t\t * this function will get a template from the cache or call the\r\n\t\t * factory to build a new template function\r\n\t\t *\r\n\t\t * @param   {String}    name    dot separated string representing file path\r\n\t\t * @param   {Request}   req     node js server request object\r\n\t\t * @param   {Response}  res     node js server response object\r\n\t\t *\r\n\t\t * @returns {Template}          new Template instance ready to be used\r\n\t\t */\r\n\t\tget: fluent(function( name ){\r\n\r\n\t\t\tvar templateObj = templates[ name ];\r\n\r\n\t\t\t// create or check cache timeout to rebuild the cache\r\n\t\t\tif( templateObj == null || templateObj.fn && (templateObj.built + cache) < Date.now() ){\r\n\t\t\t\tconsole.log( name + ' template rebuilt' );\r\n\t\t\t\ttemplateObj = templates[ name ] = {\r\n\t\t\t\t\tfn   : TemplateFactory( name ),\r\n\t\t\t\t\tbuilt: Date.now()\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn new Template( templateObj.fn );\r\n\t\t})\r\n\t} );\r\n\r\n\treturn Template\r\n\r\n})();"]}