{"version":3,"sources":["template.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,AAAC,YAAU;;;;;;;;;;;;;AAaxB,MACE,SAAS,GAAG,EAAE;MACd,KAAK,GAAO,IAAI,GAAG,CAAC;;;;;;;;;;;;AAAC,AAYvB,WAAS,QAAQ,CAAE,UAAU,EAAE;;AAE7B,QAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC3B,QAAI,CAAC,IAAI,GAAO,EAAE,CAAC;GACpB;;AAED,QAAM,CAAE,QAAQ,CAAC,SAAS,EAAE;;;;;;;;;;AAU1B,QAAI,EAAI,UAAU,IAAI,EAAE;AACtB,aAAO,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAE,CAAC;KAC9B;GACF,CAAE;;;AAAC,AAGJ,QAAM,CAAE,QAAQ,EAAE;;;;;;;;;;;;;AAahB,OAAG,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;;AAE1B,UAAI,WAAW,GAAG,SAAS,CAAE,IAAI,CAAE;;;AAAC,AAGpC,UAAI,WAAW,IAAI,IAAI,IAAI,WAAW,CAAC,EAAE,IAAI,AAAC,WAAW,CAAC,KAAK,GAAG,KAAK,GAAI,IAAI,CAAC,GAAG,EAAE,EAAE;AACrF,eAAO,CAAC,GAAG,CAAE,IAAI,GAAG,mBAAmB,CAAE,CAAC;AAC1C,mBAAW,GAAG,SAAS,CAAE,IAAI,CAAE,GAAG;AAChC,YAAE,EAAK,eAAe,CAAE,IAAI,CAAE;AAC9B,eAAK,EAAE,IAAI,CAAC,GAAG,EAAE;SAClB,CAAC;OACH;;AAED,aAAO,IAAI,QAAQ,CAAE,WAAW,CAAC,EAAE,CAAE,CAAC;KACvC,CAAC;GACH,CAAE,CAAC;;AAEJ,SAAO,QAAQ,CAAA;CAEhB,EAAG,CAAC","file":"template-compiled.js","sourcesContent":["var Template = (function(){\r\n\r\n  /**\r\n   * @package Template\r\n   *\r\n   * the template class is used to store all the information to\r\n   * compile a template. it can be returned as a template string\r\n   * or a json object\r\n   *\r\n   * @author  Andrew Fountain\r\n   * @email   andrew@envision.digital\r\n   * @date    2015-08-01\r\n   */\r\n  var\r\n    templates = {},\r\n    cache     = 1000 * 1;\r\n\r\n  /**\r\n   * Template\r\n   *\r\n   * this class is used to hold all the variables used to compile a\r\n   * Template.\r\n   *\r\n   * @param   {Function}  templateFn  function to compile a template\r\n   *\r\n   * @constructor\r\n   */\r\n  function Template( templateFn ){\r\n\r\n    this.template = templateFn;\r\n    this.vars     = {};\r\n  }\r\n\r\n  extend( Template.prototype, {\r\n\r\n    /**\r\n     * Template.send\r\n     *\r\n     * this function will compile the template variables with the\r\n     * template function to give a finished template\r\n     *\r\n     * @returns {String}\r\n     */\r\n    send  : function( vars ){\r\n      return this.template( vars );\r\n    }\r\n  } );\r\n\r\n// add static methods to the template object\r\n  extend( Template, {\r\n    /**\r\n     * @static  Template.get\r\n     *\r\n     * this function will get a template from the cache or call the\r\n     * factory to build a new template function\r\n     *\r\n     * @param   {String}    name    dot separated string representing file path\r\n     * @param   {Request}   req     node js server request object\r\n     * @param   {Response}  res     node js server response object\r\n     *\r\n     * @returns {Template}          new Template instance ready to be used\r\n     */\r\n    get: fluent(function( name ){\r\n\r\n      var templateObj = templates[ name ];\r\n\r\n      // create or check cache timeout to rebuild the cache\r\n      if( templateObj == null || templateObj.fn && (templateObj.built + cache) < Date.now() ){\r\n        console.log( name + ' template rebuilt' );\r\n        templateObj = templates[ name ] = {\r\n          fn   : TemplateFactory( name ),\r\n          built: Date.now()\r\n        };\r\n      }\r\n\r\n      return new Template( templateObj.fn );\r\n    })\r\n  } );\r\n\r\n  return Template\r\n\r\n})();"]}